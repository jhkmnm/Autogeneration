using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Linq;


namespace 姓名自动生成
{
    public class 自动生成
    {
        #region 姓名
        private static string firstName = @"赵,钱,孙,李,周,吴,郑,王,冯,陈,褚,卫,蒋,沈,韩,杨,朱,秦,尤,许,何,吕,施,张,孔,曹,严,华,金,魏,陶,姜,
            戚,谢,邹,喻,柏,水,窦,章,云,苏,潘,葛,奚,范,彭,郎,鲁,韦,昌,马,苗,凤,花,方,俞,任,袁,柳,丰,鲍,史,唐,费,廉,岑,薛,雷,贺,倪,汤,
            滕,殷,罗,毕,郝,邬,安,常,乐,于,时,傅,皮,卞,齐,康,伍,余,元,卜,顾,孟,平,黄,和,穆,萧,尹,姚,邵,湛,汪,祁,毛,禹,狄,米,贝,明,臧,计,
            伏,成,戴,谈,宋,茅,庞,熊,纪,舒,屈,项,祝,董,梁,杜,阮,蓝,闵,席,季,麻,强,贾,路,娄,危,江,童,颜,郭,梅,盛,林,刁,钟,徐,丘,骆,高,
            夏,蔡,田,樊,胡,凌,霍,虞,万,支,柯,昝,管,卢,莫,经,房,裘,缪,干,解,应,宗,丁,宣,贲,邓,郁,单,杭,洪,包,诸,左,石,崔,吉,钮,龚,程,
            嵇,邢,滑,裴,陆,荣,翁,荀,羊,於,惠,甄,麴,家,封,芮,羿,储,靳,汲,邴,糜,松,井,段,富,巫,乌,焦,巴,弓,牧,隗,山,谷,车,侯,宓,蓬,全,
            郗,班,仰,秋,仲,伊,宫,宁,仇,栾,暴,甘,钭,厉,戌,祖,武,符,刘,景,詹,束,龙,叶,幸,司,韶,郜,黎,蓟,薄,印,宿,白,怀,蒲,邰,从,鄂,索,
            咸,籍,赖,卓,蔺,屠,蒙,池,乔,阴,郁,胥,能,苍,双,闻,莘,党,翟,谭,贡,劳,逢,姬,申,扶,堵,冉,宰,郦,雍,郤,璩,桑,桂,濮,牛,寿,通,边,
            扈,燕,冀,郏,浦,尚,农,温,别,庄,晏,柴,瞿,阎,充,慕,连,茹,习,宦,艾,鱼,容,向,古,易,慎,戈,廖,庾,终,暨,居,衡,步,都,耿,满,弘,匡,国,
            文,寇,广,禄,阙,东,欧,殳,沃,利,蔚,越,菱,隆,师,巩,厍,聂,晃,勾,敖,融,冷,訾,辛,阚,那,简,饶,空,曾,毋,沙,乜,养,鞠,须,丰,巢,
            关,蒯,相,查,后,荆,红,游,竺,权,逯,盖,益,桓,公,万俟,司马,上官,欧阳,夏侯,诸葛,闻人,东方,赫连,皇甫,尉迟,公羊,澹台,公冶,宗政,
            濮阳,淳于,单于,太叔,申屠,公孙,仲孙,轩辕,令狐,钟离,宇文,长孙,慕容,司徒,司空";

        private static string lastName = @"努,迪,立,林,维,吐,丽,新,涛,米,亚,克,湘,明,
            白,玉,代,孜,霖,霞,加,永,卿,约,小,刚,光,峰,春,基,木,国,娜,晓,兰,阿,伟,英,元,
            音,拉,亮,玲,木,兴,成,尔,远,东,华,旭,迪,吉,高,翠,莉,云,华,军,荣,柱,科,生,昊,
            耀,汤,胜,坚,仁,学,荣,延,成,庆,音,初,杰,宪,雄,久,培,祥,胜,梅,顺,涛,西,库,康,
            温,校,信,志,图,艾,赛,潘,多,振,伟,继,福,柯,雷,田,也,勇,乾,其,买,姚,杜,关,陈,
            静,宁,春,马,德,水,梦,晶,精,瑶,朗,语,日,月,星,河,飘,渺,星,空,如,萍,棕,影,南,北";

        static Random rnd = new Random((int)DateTime.Now.ToFileTimeUtc());

        public static string 姓名()
        {
            int namelength = 0;
            namelength = rnd.Next(2, 4);
            firstName = firstName.Replace("\n", "");
            firstName = firstName.Replace("\r", "");
            firstName = firstName.Replace(" ", "");
            lastName = lastName.Replace("\r", "");
            lastName = lastName.Replace("\n", "");
            lastName = lastName.Replace(" ", "");
            string name = "";
            string[] FirstName = firstName.Split(',');
            string[] LastName = lastName.Split(',');
            if (namelength == 2)
            {
                name = FirstName[rnd.Next(0, FirstName.Length)] + LastName[rnd.Next(0, LastName.Length)];
            }
            else if (namelength == 3)
            {
                name = FirstName[rnd.Next(0, FirstName.Length)] + LastName[rnd.Next(0, LastName.Length)] + LastName[rnd.Next(0, LastName.Length)];
            }

            return name;
        }

        #endregion

        #region 身份证
        public static string 身份证号()
        {
            System.Random rnd;
            string[] _crabodistrict = new string[] { "420621", "420621", "330302", "510524", "510524", "420115", "220221", "510524", "310228", "511026", "330324", "330324", "510302", "370923", "130130", "533221", "511302", "510281", "152701", "510302", "530111", "500236", "350521", "330382", "653123", "540102", "430402", "330324", "350322", "133024", "131122", "533001", "330324", "350322", "131122", "430503", "110108", "222303", "640202", "640202", "510703", "371427", "510321", "220125", "430426", "440102", "420100", "640222", "211322", "441424", "650203", "332623", "332522", "340828", "371329", "310225", "410802", "330421", "330219", "320830", "410181", "320683", "210622", "500381", "350583", "350582", "110101", "612725", "142123", "522130", "350481", "350420", "350420", "510623", "510105", "371426", "421023", "330724", "653128", "332627", "650103", "420124", "510502", "520103", "510132", "350181", "513029", "350321", "330823", "520103", "610323", "622424", "370306", "150104", "520103", "510183", "230121", "610327", "350181", "510223", "440104", "130638", "370321", "370321", "370321", "370321", "440681", "522424", "522424", "440882", "510522", "510522", "650203", "510522", "445122", "445122", "430304", "430403", "422201", "360681", "372926", "110105", "532823", "441521", "320924", "330127", "350321", "350321", "440303", "211002", "420902", "422201", "422201", "370602", "513101", "350128", "654201", "650108", "332626", "420111", "140622", "422228", "330302", "512930", "142201", "370602", "512923", "330325", "152726", "320684", "411122", "522121", "513030", "441381", "331023", "513101", "520201", "513127", "533001", "120103", "220581", "450422", "120103", "513021", "510128", "362502", "520103", "232303", "620302", "422301", "420104", "320902", "130427", "422201", "131082", "512322", "450521", "360111", "610402", "110108", "511381", "513332", "510922", "330323", "230104", "430421", "652322", "652322", "150103", "511303", "370811", "653024", "511521", "420704", "411324", "513902", "440784", "410105", "350204", "420982", "110101", "522322", "430981", "130921", "441424", "530111", "230306", "420203", "210105", "330303", "350782", "452623", "511622", "430281", "330226", "510322", "511225", "654125", "650204", "142732", "110108", "512301", "513326", "610402", "440582", "610326", "510322", "522729", "421126", "510902", "610502", "522101", "330621", "510130", "220402", "654101", "441602", "452624", "411303", "310107", "522101", "110103", "510229", "510213", "612323", "341226", "370705", "511325", "330323", "350321", "533124", "150204", "530181", "370982", "421125", "232128", "219714", "522701", "445121", "652301", "330105", "510104", "440102", "130702", "440601", "411302", "533124", "440923", "330325", "510105", "422101", "330323", "430121", "430726", "230921", "110108", "513901", "321024", "511002", "510623", "510402", "320921", "330304", "230106", "120103", "440524", "330825", "220303", "530129", "330382", "342224", "110101", "420106", "510232", "110108", "110224", "210106", "429006", "220222", "513722", "330322", "332601", "430528", "410105", "500382", "420204", "420111", "342128", "610104", "510230", "510226", "513030", "510226", "330501", "612426", "422202", "330622", "131125", "230107", "320504", "420621", "511025", "150102", "511025", "210381", "422201", "500107", "640321", "440104", "500223", "352102", "362323", "410321", "230523", "610321", "140402", "430381", "341002", "420111", "320706", "412825", "510682", "220521", "610522", "370602", "511125", "420582", "370303", "110108", "231003", "332623", "460200", "442801", "350583", "512256", "152701", "362426", "420221", "530102", "422425", "230227", "542326", "511225", "130623", "512924", "210604", "330227", "422624", "430521", "513423", "330106", "350127", "330382", "450305", "131081", "110108", "330302", "330226", "220112", "511132", "430503", "142601", "340104", "310109", "652926", "522427", "430524", "410727", "330781", "352225", "510231", "520113", "130322", "330522", "620302", "612723", "450204", "230107", "321119", "152301", "152301", "511303", "330327", "330106", "610502", "632802", "522226", "420106", "522226", "370781", "430624", "210221", "610403", "530200", "210105", "522724", "412727", "152327", "150424", "510812", "342129", "620102", "320682", "210402", "440103", "612133", "540107", "150102", "130633", "320582", "320223", "321283", "410203", "653128", "142602", "330325", "362329", "500226", "232623", "610404", "532501", "500102", "432301", "371302", "330226", "520103", "330322", "330625", "715689", "321183", "430923", "420623", "110102", "512927", "027624", "460035", "360124", "510823", "513901", "320222", "510111", "132525", "510181", "330323", "370304", "110108", "620102", "330102", "321281", "132924", "511322", "330825", "532324", "110101", "130527", "610321", "441522", "330104", "510525", "371424", "510184", "612401", "632121", "520201", "510322", "510921", "120104", "110103", "510722", "450421", "510131", "533102", "510212", "510502", "330602", "330327", "150426", "330381", "520102", "510131", "101344", "320721", "352229", "510106", "542121", "511123", "321088", "410105", "632322", "542129", "110101", "420106", "510106", "330419", "152527", "510723", "120103", "511122", "350583", "510105", "440509", "340321", "360429", "320924", "352227", "130981", "230304", "152102", "130730", "210711", "511024", "440306", "430423", "513002", "140502", "520103" };
            rnd = new Random(System.DateTime.Now.Millisecond);

            //PIN = District + Year(50-92) + Month(01-12) + Date(01-30) + Seq(001-600)
            string _pinCode = string.Format("{0}{1}{2:00}{3:00}{4:000}", _crabodistrict[rnd.Next(0, _crabodistrict.Length)], rnd.Next(1950, 2006), rnd.Next(1, 12), rnd.Next(1, 30), rnd.Next(1, 600));
            #region Verify
            char[] _chrPinCode = _pinCode.ToCharArray();
            //校验码字符值
            char[] _chrVerify = new char[] { '1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2' };
            //i----表示号码字符从由至左包括校验码在内的位置序号；
            //ai----表示第i位置上的号码字符值；
            //Wi----示第i位置上的加权因子，其数值依据公式intWeight=2（n-1）(mod 11)计算得出。
            int[] _intWeight = new int[] { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1 };
            int _craboWeight = 0;
            for (int i = 0; i < 17; i++)//从1 到 17 位,18为要生成的验证码
            {
                _craboWeight = _craboWeight + Convert.ToUInt16(_chrPinCode[i].ToString()) * _intWeight[i];                
            }
            _craboWeight = _craboWeight % 11;
            _pinCode += _chrVerify[_craboWeight];
            
            #endregion
            return _pinCode;
        }
        #endregion

        private static string[] telStarts = "134,135,136,137,138,139,150,151,152,157,158,159,130,131,132,155,156,133,153,180,181,182,183,185,186,176,187,188,189,177,178".Split(',');


        /// <summary>
        /// 随机生成电话号码
        /// </summary>
        /// <returns></returns>
        public static string 手机号()
        {
            int n = rnd.Next(10, 1000);
            int index = rnd.Next(0, telStarts.Length - 1);
            string first = telStarts[index];
            string second = (rnd.Next(100, 888) + 10000).ToString().Substring(1);
            string thrid = (rnd.Next(1, 9100) + 10000).ToString().Substring(1);
            return first + second + thrid;
        }
    }
}
